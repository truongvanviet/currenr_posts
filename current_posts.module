<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * Implements hook_block_help().
 */

function current_posts_help($path, $arg) {
  switch ($path) {
    case "admin/help#current_posts":
      return '<p>'.  t("Displays links to posts created recently.") .'</p>';
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function current_posts_block_info() {
  $blocks['current_posts'] = array(
    'info' => t('Current posts vuet'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
 * Custom content function.
 *
 * Sets beginning and end dates, retrieves posts from database
 * saved in that time period.
 *
 * @param $display
 *   Whether called by block or page, which need different numbers of posts.
 * @return
 *   A result set of the targeted posts.
 */
function current_posts_contents($display){
  //Get today's date.
  $today = getdate();
  //Calculate midnight a week ago.
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
  //Get all posts from one week ago to the present.
  $end_time = time();
  //Maximum number of posts to show, set in configuration form.
  $max_num = variable_get('current_posts_max', 3);

  //Use Database API to retrieve current posts.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 0) //Published.
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC'); //Most recent first.

  if ($display == 'block'){
    //Restrict the range if it's a block.
    $query->range(0, $max_num);
  }//Now proceeds to execute.
  //If called by page, query proceeds directly to execute().

  return $query->execute();
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block(s).
 */
function current_posts_block_view($delta = '') {
  switch($delta){
    case 'current_posts':
      $block['subject'] = t('Current posts bang');
      if(user_access('access content')){
        //Use our custom function to retrieve data and
        //identify request source as block.
        $result = current_posts_contents('block');
        //Array to contain items for the block to render.
        $items = array();
        //Iterate over the resultset and format as links.
        foreach ($result as $node){
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          );
        }

        if (empty($items)) { //No content in the last week.
          $block['content'] = t('No posts available.');
        }
        else {
          //Pass data through theme function.
          $block['content']['posts'] = array(
            '#theme' => 'item_list__current_posts__block',
            '#items' => $items,
          );
          //Add a link to the page for more entries.
          $block['content']['more'] = array(
            '#theme' => 'more_link__current_posts',
            '#url' => 'current_posts',
            '#title' => t('See the full list of current posts.'),
          );
        }
      }
  }
  return $block;
}

/**
 * Implements hook_permission().
 */
function current_posts_permission(){
  return array(
    'access current_posts content' => array(
      'title' => t('Access content for the Current posts module'),
    )
  );
}


/**
 * Implements hook_menu().
 *
 * Menu items are automatically translated, and should not
 * be wrapped in t().
 */
function current_posts_menu() {
  $items = array();

  $items['admin/config/content/current_posts'] = array(
    'title' => 'Current posts',
    'description' => 'Configuration for Current posts module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('current_posts_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['current_posts'] = array(
    'title' => 'Current posts',
    'page callback' => '_current_posts_page',
    'access arguments' => array('access current_posts content'),
    'type' => MENU_CALLBACK, //Will not appear in any menu.
  );
  $items['database_api'] = array(
    'title' => 'Database api',
    'page callback' => '_current_posts_database',
    'access arguments' => array('access current_posts content'),
    'type' => MENU_CALLBACK, //Will not appear in any menu.
  );

  return $items;
}

/**
 * Form function, called by drupal_get_form()
 * in current_posts_menu().
 */
function current_posts_form($form, &$form_state) {
  $form['current_posts_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of posts'),
    '#default_value' => variable_get('current_posts_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE,
  );
  //Takes care of providing submit button and user messages.
  return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 *
 * The function name is created in a similar way to a hook,
 * by appending '_validate' to the name of the form, as defined by
 * the function above and passed to drupal_get_form in current_posts_menu().
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function current_posts_form_validate($form, &$form_state){
  $max_num = $form_state['values']['current_posts_max'];
  if (!is_numeric($max_num)){
    form_set_error('current_posts_max', t('You must enter an integer for the maximum number of posts to display.'));
  }
  elseif ($max_num <= 0){
    form_set_error('current_posts_max', t('Maximum number of posts to display must be positive.'));
  }
}

/**
 * Custom page callback function, declared in current_posts_menu().
 */
function _current_posts_page() {
 drupal_set_title('Current posts bang');
  $result = current_posts_contents('page');
  //dpm($result->fetch());
  //Array to contain items for the block to render.
  $items = array();
  //Iterate over the resultset and format as links.
  foreach ($result as $node){
    $items[] = array(
    'data' => l($node->title, 'node/' . $node->nid),
    );
  }
  if (empty($items)) { //No content in the last week.
    $page_array['current_posts_arguments'] = array(
      //Title serves as page subtitle
      '#title' => t('All posts from the last week'),
      '#markup' => t('No posts available.'),
      '#theme' => 'item_list__current_posts',
    );
    return $page_array;
  }
  else {
    $page_array['current_posts_arguments'] = array(
      '#title' => t('All posts from the last week'),
      '#items' => $items,
      //Theme function includes theme hook suggestion.
      '#theme' => 'item_list__current_posts',
    );
    return $page_array;
  }
}

function _current_posts_database(){
$query = db_select('node', 'n');
$query->join('users', 'u', 'n.uid = u.uid');
$query
  ->fields('n', array('nid', 'title'))
->fields('u', array('name'));
$result = $query->execute();
//foreach ($result as $record) {
//    
//    $items[] = array('data'=>$record); 
//    
//}
$items = array('C#',11,
);
dsm($items);
insert_db();
//return $query;
$page_array['current_posts_arguments'] = array(
      //Title serves as page subtitle
      //
      '#title' => t('database api'),
     // '#items' => $items['data']->title,
      '#theme' => 'item_list__current_posts',
    );
return $page_array;
}
function insert_db()
{
      db_insert('about')
    ->fields(array(
     //  'id' => 3, 
      'name' => 'viet 2',
      'fullname' => 'truong van viet',
      'sex' =>'male',
      'birthday' => 1992,
      'email' =>'truongvanviet92@gmail.com',
    ))
    ->execute();
}