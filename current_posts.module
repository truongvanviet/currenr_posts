<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * Implements hook_block_help().
 */

function current_posts_help($path, $arg) {
  switch ($path) {
    case "admin/help#current_posts":
      return '<p>'.  t("Displays links to posts created recently.") .'</p>';
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function current_posts_block_info() {
  $blocks['current_posts'] = array(
    'info' => t('Current posts vuet'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
 * Custom content function.
 *
 * Sets beginning and end dates, retrieves posts from database
 * saved in that time period.
 *
 * @param $display
 *   Whether called by block or page, which need different numbers of posts.
 * @return
 *   A result set of the targeted posts.
 */
function current_posts_contents($display){
  //Get today's date.
  $today = getdate();
  //Calculate midnight a week ago.
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
  //Get all posts from one week ago to the present.
  $end_time = time();
  //Maximum number of posts to show, set in configuration form.
  $max_num = variable_get('current_posts_max', 3);

  //Use Database API to retrieve current posts.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 0) //Published.
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC'); //Most recent first.

  if ($display == 'block'){
    //Restrict the range if it's a block.
    $query->range(0, $max_num);
  }//Now proceeds to execute.
  //If called by page, query proceeds directly to execute().

  return $query->execute();
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block(s).
 */
function current_posts_block_view($delta = '') {
  switch($delta){
    case 'current_posts':
      $block['subject'] = t('Current posts bang');
      if(user_access('access content')){
        //Use our custom function to retrieve data and
        //identify request source as block.
        $result = current_posts_contents('block');
        //Array to contain items for the block to render.
        $items = array();
        //Iterate over the resultset and format as links.
        foreach ($result as $node){
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          );
        }

        if (empty($items)) { //No content in the last week.
          $block['content'] = t('No posts available.');
        }
        else {
          //Pass data through theme function.
          $block['content']['posts'] = array(
            '#theme' => 'item_list__current_posts__block',
            '#items' => $items,
          );
          //Add a link to the page for more entries.
          $block['content']['more'] = array(
            '#theme' => 'more_link__current_posts',
            '#url' => 'current_posts',
            '#title' => t('See the full list of current posts.'),
          );
        }
      }
  }
  return $block;
}

/**
 * Implements hook_permission().
 */
function current_posts_permission(){
  return array(
    'access current_posts content' => array(
      'title' => t('Access content for the Current posts module'),
    )
  );
}


/**
 * Implements hook_menu().
 *
 * Menu items are automatically translated, and should not
 * be wrapped in t().
 */
function current_posts_menu() {
  $items = array();

  $items['admin/config/content/current_posts'] = array(
    'title' => 'Current posts',
    'description' => 'Configuration for Current posts module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('current_posts_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['current_posts'] = array(
    'title' => 'Current posts',
    'page callback' => '_current_posts_page',
    'access arguments' => array('access current_posts content'),
    'type' => MENU_CALLBACK, //Will not appear in any menu.
  );
  $items['database_api'] = array(
    'title' => 'Register',
      //'page callback' => 'drupal_get_form',
 'page arguments' => array('current_posts_autocheckboxes'),
    'access callback' => TRUE,     // 'page arguments' => array('form_example_states_form'),
     
    'type' => MENU_CALLBACK, //Will not appear in any menu.
         
      
  );
  
  
  $items['test'] = array(
    'title' => 'Test',
      'page callback' => 'current_posts_textfield',
 //'page arguments' => array(''),
    'access callback' => TRUE,     // 'page arguments' => array('form_example_states_form'),
     
    'type' => MENU_CALLBACK, //Will not appear in any menu.
  );
  
  $items['multistep'] = array(
    'title' => 'Multistep',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('current_posts_wizard'),
    'access callback' => TRUE,
     
      );
      
  return $items;
}

function form_example_tutorial_1($form,$form_state) {

   $form['selected'] = array(
       '#type' => 'select',
       '#title' => t('Selected'),
       '#options' => array(
          0 => t('No'),
         1 => t('Yes'),
       ),
       '#default_value' => $category['selected'],
       '#description' => t('Set this to <em>Yes</em> if you would like this category to be selected by default.'),
   );
   
   $form['new'] = array(
       '#type' => 'viet'
       );
 return $form;

}

/**
 * Form function, called by drupal_get_form()
 * in current_posts_menu().
 */
function current_posts_form($form, &$form_state) {
  $form['current_posts_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of posts'),
    '#default_value' => variable_get('current_posts_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE,
  );
  //Takes care of providing submit button and user messages.
  return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 *
 * The function name is created in a similar way to a hook,
 * by appending '_validate' to the name of the form, as defined by
 * the function above and passed to drupal_get_form in current_posts_menu().
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function current_posts_form_validate($form, &$form_state){
  $max_num = $form_state['values']['current_posts_max'];
  if (!is_numeric($max_num)){
    form_set_error('current_posts_max', t('You must enter an integer for the maximum number of posts to display.'));
  }
  elseif ($max_num <= 0){
    form_set_error('current_posts_max', t('Maximum number of posts to display must be positive.'));
  }
}

/**
 * Custom page callback function, declared in current_posts_menu().
 */
function _current_posts_page() {
 drupal_set_title('Current posts bang');
  $result = current_posts_contents('page');
  //dpm($result->fetch());
  //Array to contain items for the block to render.
  $items = array();
  dsm('viet');
  //Iterate over the resultset and format as links.
  foreach ($result as $node){
    $items[] = array(
    'data' => l($node->title, 'node/' . $node->nid),
    );
  }
  if (empty($items)) { //No content in the last week.
    $page_array['current_posts_arguments'] = array(
      //Title serves as page subtitle
      '#title' => t('All posts from the last week'),
      '#markup' => t('No posts available.'),
      '#theme' => 'item_list__current_posts',
    );
    return $page_array;
  }
  else {
    $page_array['current_posts_arguments'] = array(
      '#title' => t('All posts from the last week'),
      '#items' => $items,
      //Theme function includes theme hook suggestion.
      '#theme' => 'item_list__current_posts',
    );
    return $page_array;
  }
}

function _current_posts_database($bang, $viet){
    
$query = db_select('node', 'n');
$query->join('users', 'u', 'n.uid = u.uid');
$query
  ->fields('n', array('nid', 'title'))
->fields('u', array('name'));
$result = $query->execute();
//foreach ($result as $record) {
//    
//    $items[] = array('data'=>$record); 
//    
//}
   print '<h1>'.$bang.'</h1>';
    print '<h1>'.$viet.'</h1>';
$items = array('C#',11,);
current_posts_delete();
//dsm($items);
//current_posts_update();
//insert_db('hacongbang', 'viet');
//return $query;
$page_array['current_posts_arguments'] = array(
      //Title serves as page subtitle
      //
      '#title' => t('database api'),
     // '#items' => $items['data']->title,
      '#theme' => 'item_list__current_posts',
    );
return $page_array;
}
function insert_db($bang, $viet)
{
      db_insert('about')
    ->fields(array(
     //  'id' => 3, 
      'name' => $bang,
      'fullname' => $viet,
      'sex' =>'male',
      'birthday' => 1992,
      'email' =>'truongvanviet92@gmail.com',
    ))
    ->execute();
}
function current_posts_update() {
  // Populate the node access table.
  db_update('about')
    ->fields(array(
                'name'=>'viet',
                'fullname'=>'viet truong'    
    ))
    ->condition('id',1)
    ->execute();
  
  }
  
 function current_posts_delete() {
 
     // Populate the node access table.
     db_delete('about')
     ->condition('id',2)
     ->execute();
 }
 
 function current_posts_autocheckboxes($form, &$form_state) {
  // Since the form builder is called after every AJAX request, we rebuild
  // the form based on $form_state.
  $num_checkboxes = !empty($form_state['values']['howmany_select']) ? $form_state['values']['howmany_select'] : 2;
dsm($form_state);
  $form['howmany_select'] = array(
    '#title' => t('How many checkboxes do you want?'),
    '#type' => 'select',
    '#options' => array(1 => 1, 2 => 2, 3 => 3, 4 => 4),
    '#default_value' => $num_checkboxes,
    '#ajax' => array(
      'callback' => 'current_posts_autocheckboxes_callback',
      'wrapper' => 'checkboxes-div66',
      // 'method' defaults to replaceWith, but valid values also include
      // append, prepend, before and after.
      // 'method' => 'replaceWith',
      // 'effect' defaults to none. Other valid values are 'fade' and 'slide'.
      // See ajax_example_autotextfields for an example of 'fade'.
      'effect' => 'slide',
      // 'speed' defaults to 'slow'. You can also use 'fast'
      // or a number of milliseconds for the animation to last.
      // 'speed' => 'slow',
      // Don't show any throbber...
      'progress' => array('type' => 'none'),
    ),
  );

  $form['checkboxes_fieldset'] = array(
    '#title' => t("Generated Checkboxes"),
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="checkboxes-div66">',
    '#suffix' => '</div>',
     '#attributes' => array('class' => array('bang'),'id'=> array('viet')), 
    '#type' => 'fieldset',
    '#description' => t('This is where we get automatically generated checkboxes'),
  );

  for ($i = 1; $i <= $num_checkboxes; $i++) {
    $form['checkboxes_fieldset']["checkbox$i"] = array(
      '#type' => 'checkbox',
      '#title' => "Checkbox $i",
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Callback for autocheckboxes.
 *
 * Callback element needs only select the portion of the form to be updated.
 * Since #ajax['callback'] return can be HTML or a renderable array (or an
 * array of commands), we can just return a piece of the form.
 * See @link ajax_example_advanced.inc AJAX Advanced Commands for more details
 * on AJAX framework commands.
 *
 * @return array
 *   Renderable array (the checkboxes fieldset)
 */
function current_posts_autocheckboxes_callback($form, $form_state) {
    dpm($form_state);
  return $form['checkboxes_fieldset'];
}
 
function current_posts_textfield($form, $form_state) {
    $form['fieldset']=array(
        '#type'=>'fieldset',
        '#title'=>t('People coming to the picnic'),
         '#prefix' => '<div id="wrapfeildset">',
          '#suffix' => '</div>',
                
    );
    
   $form['fieldset']['textfield']=array(
       '#title'=>t('Name'),
       '#type'=>'textfield',
       
   );
   
   $form['fieldset']['add']=array(
       '#value'=>t('Add one more'),
       '#type'=>'button',
       
   );
   
 $form['fieldset']['remove']=array(
       '#value'=>t('Remove one'),
       '#type'=>'button',
       
   );
 
    $form['Sumit']=array(
       '#value'=>t('Submit'),
       '#type'=>'submit',
       
   );  
    return $form;
}
 
function current_posts_wizard($form, &$form_state, $no_js_use = FALSE) {

  // Provide a wrapper around the entire form, since we'll replace the whole
  // thing with each submit.
  $form['#prefix'] = '<div id="wizard-form-wrapper">';
  $form['#suffix'] = '</div>';
  // We want to deal with hierarchical form values.
  $form['#tree'] = TRUE;
  
  // $form_state['storage'] has no specific drupal meaning, but it is
  // traditional to keep variables for multistep forms there.
  $step = empty($form_state['storage']['step']) ? 1 : $form_state['storage']['step'];
  $form_state['storage']['step'] = $step;

  switch ($step) {
    case 1:
    $form['step1'] = array(
       '#type' => 'fieldset',   
        '#title' => t('Step 1: Personal details'),
    );
        
               
      $form['step1']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('User name'),
        '#default_value' => empty($form_state['values']['step1']['name']) ? '' : $form_state['values']['step1']['name'],
        '#required' => TRUE,
      );
      
      $form['step1']['pass'] = array(
        '#type' => 'password',
        '#title' => t('Password'),
        '#default_value' => empty($form_state['values']['step1']['pass']) ? '' : $form_state['values']['step1']['pass'],
        '#required' => TRUE,
      );
      break;

    case 2:
      $form['step2'] = array(
        '#type' => 'fieldset',
        '#title' => t('Step 2: Street address info'),
      );
      $form['step2']['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Your email'),
        '#default_value' => empty($form_state['values']['step2']['email']) ? '' : $form_state['values']['step2']['email'],
        '#required' => TRUE,
      );
      $form['step2']['selected'] = array(
       '#type' => 'select',
       '#title' => t('Sex'),
       '#options' => array(
          'Male' => t('Male'),
         'Female' => t('Female'),
       ),
       '#default_value' => empty($form_state['values']['step2']['selected']) ? '' : $form_state['values']['step2']['selected'],
        '#required' => TRUE,
       
   );
      break;

    case 3:
      $form['step3'] = array(
        '#type' => 'fieldset',
        '#title' => t('Step 3: City info'),
      );
        $form['step3']['address'] = array(
        '#type' => 'textfield',
        '#title' => t('Your address'),
        '#default_value' => empty($form_state['values']['step3']['address']) ? '' : $form_state['values']['step3']['address'],
        '#required' => TRUE,
      );
      $form['step3']['city'] = array(
        '#type' => 'textfield',
        '#title' => t('Your city'),
        '#default_value' => empty($form_state['values']['step3']['city']) ? '' : $form_state['values']['step3']['city'],
        '#required' => TRUE,
      );
      $form['step3']['country'] = array(
        '#type' => 'textfield',
        '#title' => t('Your country'),
        '#default_value' => empty($form_state['values']['step3']['country']) ? '' : $form_state['values']['step3']['country'],
        '#required' => TRUE,
      );
      break;
  }
  if ($step == 3) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t("Submit your information"),
    );
  }
  if ($step < 3) {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next step'),
      '#ajax' => array(
        'wrapper' => 'wizard-form-wrapper',
        'callback' => 'current_posts_callback',
      ),
    );
  }
  if ($step > 1) {
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t("Previous step"),

      // Since all info will be discarded, don't validate on 'prev'.
      '#limit_validation_errors' => array(),
      // #submit is required to use #limit_validation_errors
      '#submit' => array('current_posts_submit'),
      '#ajax' => array(
        'wrapper' => 'wizard-form-wrapper',
        'callback' => 'current_posts_callback',
      ),
    );
  }

  // This simply allows us to demonstrate no-javascript use without
  // actually turning off javascript in the browser. Removing the #ajax
  // element turns off AJAX behaviors on that element and as a result
  // ajax.js doesn't get loaded.
  // For demonstration only! You don't need this.
  if ($no_js_use) {
    // Remove the #ajax from the above, so ajax.js won't be loaded.
    // For demonstration only.
    unset($form['next']['#ajax']);
    unset($form['prev']['#ajax']);
  }
  return $form;
}

function current_posts_wizard_submit($form, &$form_state) {

  // Save away the current information.
  $current_step = 'step' . $form_state['storage']['step'];
  if (!empty($form_state['values'][$current_step])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'][$current_step];
  }

  // Increment or decrement the step as needed. Recover values if they exist.
  if ($form_state['triggering_element']['#value'] == t('Next step')) {
    $form_state['storage']['step']++;
    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['storage']['step'];
    if (!empty($form_state['storage']['values'][$step_name])) {
      $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
    }
  }
  if ($form_state['triggering_element']['#value'] == t('Previous step')) {
    $form_state['storage']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['storage']['step'];
    $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
  }

  // If they're done, submit.
  if ($form_state['triggering_element']['#value'] == t('Submit your information')) {
    $value_message = t('Your information has been submitted:') . ' ';
    foreach ($form_state['storage']['values'] as $step => $values) {
      $value_message .= "$step: ";
      foreach ($values as $key => $value) {
        $value_message .= "$key=$value, ";
      }
    }
    drupal_set_message($value_message);
    $form_state['rebuild'] = FALSE;
    return;
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}

function current_posts_callback($form, $form_state) {
  return $form;
}